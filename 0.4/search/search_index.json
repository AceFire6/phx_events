{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PHX Events # PHX Events is an AsyncIO library to set up a websocket connection with Phoenix Channels in Python 3.9+. Check out the phx_event documentation Installing PHX Events # From Pip # pip install phx-events From Source # Clone the Git repo and then install the dependencies pip install -r requirements/core.txt Use the client in your code: # import asyncio from concurrent.futures import ThreadPoolExecutor from phx_events.client import PHXChannelsClient from phx_events.phx_messages import ChannelMessage , Event , Topic def print_handler ( message : ChannelMessage , client : PHXChannelsClient ) -> None : client . logger . info ( f 'DEFAULT: { message =} ' ) async def async_print_handler ( message : ChannelMessage , client : PHXChannelsClient ) -> None : client . logger . info ( f 'ASYNC: { message =} ' ) async def main () -> None : token = 'auth_token' client : PHXChannelsClient with ThreadPoolExecutor () as pool : async with PHXChannelsClient ( token ) as client : client . register_event_handler ( event = Event ( 'event_name' ), handlers = [ print_handler , async_print_handler , ], ) client . register_topic_subscription ( Topic ( 'topic:subtopic' )) await client . start_processing ( pool ) if __name__ == '__main__' : asyncio . run ( main (), debug = True ) Developing # This project uses pip-tools to manage dependencies. Before contributing ensure you agree to the DCO . Commits contributed to this project need to be signed in git . This can be done as follows ( Note -s is a shortcut for --signoff ) : git commit --signoff 1. Create a virtualenv # Note: Creating the virtualenv can be done however you want. We will assume you\u2019ve done created a new virtualenv and activated it from this point. 2. Install pip-tools : # pip install pip-tools 3. Install Dependencies # pip-sync requirements/core.txt requirements/dev.txt","title":"Home"},{"location":"#phx-events","text":"PHX Events is an AsyncIO library to set up a websocket connection with Phoenix Channels in Python 3.9+. Check out the phx_event documentation","title":"PHX Events"},{"location":"#installing-phx-events","text":"","title":"Installing PHX Events"},{"location":"#from-pip","text":"pip install phx-events","title":"From Pip"},{"location":"#from-source","text":"Clone the Git repo and then install the dependencies pip install -r requirements/core.txt","title":"From Source"},{"location":"#use-the-client-in-your-code","text":"import asyncio from concurrent.futures import ThreadPoolExecutor from phx_events.client import PHXChannelsClient from phx_events.phx_messages import ChannelMessage , Event , Topic def print_handler ( message : ChannelMessage , client : PHXChannelsClient ) -> None : client . logger . info ( f 'DEFAULT: { message =} ' ) async def async_print_handler ( message : ChannelMessage , client : PHXChannelsClient ) -> None : client . logger . info ( f 'ASYNC: { message =} ' ) async def main () -> None : token = 'auth_token' client : PHXChannelsClient with ThreadPoolExecutor () as pool : async with PHXChannelsClient ( token ) as client : client . register_event_handler ( event = Event ( 'event_name' ), handlers = [ print_handler , async_print_handler , ], ) client . register_topic_subscription ( Topic ( 'topic:subtopic' )) await client . start_processing ( pool ) if __name__ == '__main__' : asyncio . run ( main (), debug = True )","title":"Use the client in your code:"},{"location":"#developing","text":"This project uses pip-tools to manage dependencies. Before contributing ensure you agree to the DCO . Commits contributed to this project need to be signed in git . This can be done as follows ( Note -s is a shortcut for --signoff ) : git commit --signoff","title":"Developing"},{"location":"#1-create-a-virtualenv","text":"Note: Creating the virtualenv can be done however you want. We will assume you\u2019ve done created a new virtualenv and activated it from this point.","title":"1. Create a virtualenv"},{"location":"#2-install-pip-tools","text":"pip install pip-tools","title":"2. Install pip-tools:"},{"location":"#3-install-dependencies","text":"pip-sync requirements/core.txt requirements/dev.txt","title":"3. Install Dependencies"},{"location":"NAV/","text":"Home API Documentation License","title":"NAV"},{"location":"api/","text":"API documentation # phx_events.client.PHXChannelsClient # Provides the main functionality for running a client with asynchronous handlers This class should generally be initialised and used as an asynchronous context manager. Inside the async with block you should register for topics using PHXChannelsClient.register_topic_subscription and register event handlers using PHXChannelsClient.register_event_handler . Event handler functions can be async or normal functions. * Async functions are run in the event loop PHXChannelsClient._loop * Normal functions are run using the provided executor pool ( ThreadPoolExecutor by default) __init__ ( self , channel_socket_url , channel_auth_token = None , event_loop = None ) special # Source code in phx_events/client.py def __init__ ( self , channel_socket_url : str , channel_auth_token : Optional [ str ] = None , event_loop : Optional [ AbstractEventLoop ] = None , ): self . logger = async_logger . getChild ( __name__ ) self . channel_socket_url = channel_socket_url # Set up auth if it's required if channel_auth_token is not None : self . channel_socket_url += f '? { urlencode ({ \"token\" : channel_auth_token }) } ' self . _event_handler_config = {} self . _topic_registration_status = {} # Create the Event that will prevent handlers from being run before the client is started self . _client_start_event = Event () self . _registration_queue = Queue () self . _topic_registration_task = None self . _executor_pool = None # Get the default event loop or use the user-provided one if it exists self . _loop = event_loop or asyncio . get_event_loop () process_topic_registration_responses ( self ) async # Source code in phx_events/client.py async def process_topic_registration_responses ( self ) -> None : while True : phx_message = await self . _registration_queue . get () topic = phx_message . topic self . logger . info ( f 'Got topic { topic } join reply { phx_message =} ' ) status = SubscriptionStatus . SUCCESS if phx_message . payload [ 'status' ] == 'ok' else SubscriptionStatus . FAILED status_message = 'SUCCEEDED' if status == SubscriptionStatus . SUCCESS else 'FAILED' self . logger . info ( f 'Topic registration { status_message } - { phx_message =} ' ) # Set the topic status map topic_registration = self . _topic_registration_status [ topic ] # Set topic status with the message topic_registration . result = TopicSubscribeResult ( status , phx_message ) # Notify any waiting tasks that the registration has been finalised and the status can be checked topic_registration . status_updated_event . set () # Tell the queue we've finished processing the current task self . _registration_queue . task_done () process_websocket_messages ( self , websocket ) async # Source code in phx_events/client.py async def process_websocket_messages ( self , websocket : client . WebSocketClientProtocol ) -> None : self . logger . debug ( 'Starting websocket message loop' ) async for socket_message in websocket : phx_message = self . _parse_message ( socket_message ) self . logger . info ( f 'Processing message - { phx_message =} ' ) event = phx_message . event if event == PHXEvent . close : self . logger . info ( f 'Got Phoenix event { event } shutting down - { phx_message =} ' ) raise TopicClosedError ( topic = phx_message . topic , reason = 'Upstream closed' ) if event == PHXEvent . error : # Error happened in Elixir self . logger . error ( f 'Got Phoenix event { event } shutting down - { phx_message =} ' ) # Hard exit if the server closes or errors raise TopicClosedError ( topic = phx_message . topic , reason = 'Upstream error' ) # Push message into registration queue if appropriate if topic_registration_config := self . _topic_registration_status . get ( phx_message . topic ): # noqa: SIM102 if event == PHXEvent . reply and not topic_registration_config . status_updated_event . is_set (): await self . _registration_queue . put ( phx_message ) event_handler_config = self . _event_handler_config . get ( event ) if event_handler_config is None : self . logger . debug ( f 'Ignoring { phx_message =} - no event handlers registered' ) continue self . logger . info ( f 'Submitting message to { event =} queue - { phx_message =} ' ) await event_handler_config . queue . put ( phx_message ) register_event_handler ( self , event , handlers , topic = None ) # Source code in phx_events/client.py def register_event_handler ( self , event : ChannelEvent , handlers : list [ ChannelHandlerFunction ], topic : Optional [ Topic ] = None , ) -> None : if event not in self . _event_handler_config : # Create the coroutine that will become a task event_coroutine = self . _event_processor ( event ) # Create the default EventHandlerConfig self . _event_handler_config [ event ] = EventHandlerConfig ( queue = Queue (), default_handlers = [], topic_handlers = {}, task = self . _loop . create_task ( event_coroutine ), ) handler_config = self . _event_handler_config [ event ] # If there is a topic to be registered for - add the handlers to the topic handler if topic is not None : handler_config . topic_handlers . setdefault ( topic , []) . extend ( handlers ) else : # otherwise, add them to the default handlers handler_config . default_handlers . extend ( handlers ) register_topic_subscription ( self , topic ) # Source code in phx_events/client.py def register_topic_subscription ( self , topic : Topic ) -> Event : if topic_status := self . _topic_registration_status . get ( topic ): topic_ref = topic_status . connection_ref raise PHXTopicTooManyRegistrationsError ( f 'Topic { topic } already registered with { topic_ref =} ' ) # Create an event to indicate when the reply has been processed status_updated_event = Event () self . _topic_registration_status [ topic ] = TopicRegistration ( status_updated_event = status_updated_event ) return status_updated_event shutdown ( self , reason , websocket = None , executor_pool = None , wait_for_completion = True ) # Source code in phx_events/client.py def shutdown ( self , reason : str , websocket : Optional [ client . WebSocketClientProtocol ] = None , executor_pool : Optional [ Executor ] = None , wait_for_completion : bool = True , ) -> None : self . logger . info ( f 'Event loop shutting down! { reason =} ' ) if websocket is not None : self . _loop . create_task ( websocket . close ()) if self . _topic_registration_task is not None : self . _topic_registration_task . cancel () for handler_config in self . _event_handler_config . values (): handler_config . task . cancel () if executor_pool is not None : executor_pool . shutdown ( wait = wait_for_completion , cancel_futures = not wait_for_completion ) start_processing ( self , executor_pool = None ) async # Source code in phx_events/client.py async def start_processing ( self , executor_pool : Optional [ Executor ] = None ) -> None : if not self . _topic_registration_status : self . logger . error ( 'No subscribed topics nothing to do here - ending processing!' ) return self . logger . debug ( 'Creating the executor pool to use for processing registered handlers' ) self . _executor_pool = executor_pool or ThreadPoolExecutor () with self . _executor_pool as pool : self . logger . debug ( 'Connecting to websocket' ) async with client . connect ( self . channel_socket_url ) as websocket : # Close the connection when receiving SIGTERM shutdown_handler = partial ( self . shutdown , websocket = websocket , executor_pool = pool , wait_for_completion = False , ) self . _loop . add_signal_handler ( signal . SIGTERM , partial ( shutdown_handler , reason = 'SIGTERM' )) self . _loop . add_signal_handler ( signal . SIGINT , partial ( shutdown_handler , reason = 'Keyboard Interrupt' )) await self . _subscribe_to_registered_topics ( websocket ) self . _client_start_event . set () await self . process_websocket_messages ( websocket )","title":"API Documentation"},{"location":"api/#api-documentation","text":"","title":"API documentation"},{"location":"api/#phx_events.client.PHXChannelsClient","text":"Provides the main functionality for running a client with asynchronous handlers This class should generally be initialised and used as an asynchronous context manager. Inside the async with block you should register for topics using PHXChannelsClient.register_topic_subscription and register event handlers using PHXChannelsClient.register_event_handler . Event handler functions can be async or normal functions. * Async functions are run in the event loop PHXChannelsClient._loop * Normal functions are run using the provided executor pool ( ThreadPoolExecutor by default)","title":"PHXChannelsClient"},{"location":"api/#phx_events.client.PHXChannelsClient.__init__","text":"Source code in phx_events/client.py def __init__ ( self , channel_socket_url : str , channel_auth_token : Optional [ str ] = None , event_loop : Optional [ AbstractEventLoop ] = None , ): self . logger = async_logger . getChild ( __name__ ) self . channel_socket_url = channel_socket_url # Set up auth if it's required if channel_auth_token is not None : self . channel_socket_url += f '? { urlencode ({ \"token\" : channel_auth_token }) } ' self . _event_handler_config = {} self . _topic_registration_status = {} # Create the Event that will prevent handlers from being run before the client is started self . _client_start_event = Event () self . _registration_queue = Queue () self . _topic_registration_task = None self . _executor_pool = None # Get the default event loop or use the user-provided one if it exists self . _loop = event_loop or asyncio . get_event_loop ()","title":"__init__()"},{"location":"api/#phx_events.client.PHXChannelsClient.process_topic_registration_responses","text":"Source code in phx_events/client.py async def process_topic_registration_responses ( self ) -> None : while True : phx_message = await self . _registration_queue . get () topic = phx_message . topic self . logger . info ( f 'Got topic { topic } join reply { phx_message =} ' ) status = SubscriptionStatus . SUCCESS if phx_message . payload [ 'status' ] == 'ok' else SubscriptionStatus . FAILED status_message = 'SUCCEEDED' if status == SubscriptionStatus . SUCCESS else 'FAILED' self . logger . info ( f 'Topic registration { status_message } - { phx_message =} ' ) # Set the topic status map topic_registration = self . _topic_registration_status [ topic ] # Set topic status with the message topic_registration . result = TopicSubscribeResult ( status , phx_message ) # Notify any waiting tasks that the registration has been finalised and the status can be checked topic_registration . status_updated_event . set () # Tell the queue we've finished processing the current task self . _registration_queue . task_done ()","title":"process_topic_registration_responses()"},{"location":"api/#phx_events.client.PHXChannelsClient.process_websocket_messages","text":"Source code in phx_events/client.py async def process_websocket_messages ( self , websocket : client . WebSocketClientProtocol ) -> None : self . logger . debug ( 'Starting websocket message loop' ) async for socket_message in websocket : phx_message = self . _parse_message ( socket_message ) self . logger . info ( f 'Processing message - { phx_message =} ' ) event = phx_message . event if event == PHXEvent . close : self . logger . info ( f 'Got Phoenix event { event } shutting down - { phx_message =} ' ) raise TopicClosedError ( topic = phx_message . topic , reason = 'Upstream closed' ) if event == PHXEvent . error : # Error happened in Elixir self . logger . error ( f 'Got Phoenix event { event } shutting down - { phx_message =} ' ) # Hard exit if the server closes or errors raise TopicClosedError ( topic = phx_message . topic , reason = 'Upstream error' ) # Push message into registration queue if appropriate if topic_registration_config := self . _topic_registration_status . get ( phx_message . topic ): # noqa: SIM102 if event == PHXEvent . reply and not topic_registration_config . status_updated_event . is_set (): await self . _registration_queue . put ( phx_message ) event_handler_config = self . _event_handler_config . get ( event ) if event_handler_config is None : self . logger . debug ( f 'Ignoring { phx_message =} - no event handlers registered' ) continue self . logger . info ( f 'Submitting message to { event =} queue - { phx_message =} ' ) await event_handler_config . queue . put ( phx_message )","title":"process_websocket_messages()"},{"location":"api/#phx_events.client.PHXChannelsClient.register_event_handler","text":"Source code in phx_events/client.py def register_event_handler ( self , event : ChannelEvent , handlers : list [ ChannelHandlerFunction ], topic : Optional [ Topic ] = None , ) -> None : if event not in self . _event_handler_config : # Create the coroutine that will become a task event_coroutine = self . _event_processor ( event ) # Create the default EventHandlerConfig self . _event_handler_config [ event ] = EventHandlerConfig ( queue = Queue (), default_handlers = [], topic_handlers = {}, task = self . _loop . create_task ( event_coroutine ), ) handler_config = self . _event_handler_config [ event ] # If there is a topic to be registered for - add the handlers to the topic handler if topic is not None : handler_config . topic_handlers . setdefault ( topic , []) . extend ( handlers ) else : # otherwise, add them to the default handlers handler_config . default_handlers . extend ( handlers )","title":"register_event_handler()"},{"location":"api/#phx_events.client.PHXChannelsClient.register_topic_subscription","text":"Source code in phx_events/client.py def register_topic_subscription ( self , topic : Topic ) -> Event : if topic_status := self . _topic_registration_status . get ( topic ): topic_ref = topic_status . connection_ref raise PHXTopicTooManyRegistrationsError ( f 'Topic { topic } already registered with { topic_ref =} ' ) # Create an event to indicate when the reply has been processed status_updated_event = Event () self . _topic_registration_status [ topic ] = TopicRegistration ( status_updated_event = status_updated_event ) return status_updated_event","title":"register_topic_subscription()"},{"location":"api/#phx_events.client.PHXChannelsClient.shutdown","text":"Source code in phx_events/client.py def shutdown ( self , reason : str , websocket : Optional [ client . WebSocketClientProtocol ] = None , executor_pool : Optional [ Executor ] = None , wait_for_completion : bool = True , ) -> None : self . logger . info ( f 'Event loop shutting down! { reason =} ' ) if websocket is not None : self . _loop . create_task ( websocket . close ()) if self . _topic_registration_task is not None : self . _topic_registration_task . cancel () for handler_config in self . _event_handler_config . values (): handler_config . task . cancel () if executor_pool is not None : executor_pool . shutdown ( wait = wait_for_completion , cancel_futures = not wait_for_completion )","title":"shutdown()"},{"location":"api/#phx_events.client.PHXChannelsClient.start_processing","text":"Source code in phx_events/client.py async def start_processing ( self , executor_pool : Optional [ Executor ] = None ) -> None : if not self . _topic_registration_status : self . logger . error ( 'No subscribed topics nothing to do here - ending processing!' ) return self . logger . debug ( 'Creating the executor pool to use for processing registered handlers' ) self . _executor_pool = executor_pool or ThreadPoolExecutor () with self . _executor_pool as pool : self . logger . debug ( 'Connecting to websocket' ) async with client . connect ( self . channel_socket_url ) as websocket : # Close the connection when receiving SIGTERM shutdown_handler = partial ( self . shutdown , websocket = websocket , executor_pool = pool , wait_for_completion = False , ) self . _loop . add_signal_handler ( signal . SIGTERM , partial ( shutdown_handler , reason = 'SIGTERM' )) self . _loop . add_signal_handler ( signal . SIGINT , partial ( shutdown_handler , reason = 'Keyboard Interrupt' )) await self . _subscribe_to_registered_topics ( websocket ) self . _client_start_event . set () await self . process_websocket_messages ( websocket )","title":"start_processing()"},{"location":"license/","text":"Project License # Project License Notice # Copyright 2021 Jethro Muller Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Project License # Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"license/#project-license","text":"","title":"Project License"},{"location":"license/#project-license-notice","text":"Copyright 2021 Jethro Muller Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Project License Notice"},{"location":"license/#project-license_1","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"Project License"}]}