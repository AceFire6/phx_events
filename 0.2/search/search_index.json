{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PHX Events PHX Events is an AsyncIO library to set up a websocket connection with Phoenix Channels in Python 3.9+. Installing PHX Events From Pip pip install phx-events From Source Clone the Git repo and then install the dependencies pip install -r requirements/core.txt Use the client in your code: import asyncio from concurrent.futures import ThreadPoolExecutor from phx_events.client import PHXChannelsClient from phx_events.phx_messages import ChannelMessage , Event , Topic def print_handler ( message : ChannelMessage , client : PHXChannelsClient ) -> None : client . logger . info ( f 'DEFAULT: { message =} ' ) async def async_print_handler ( message : ChannelMessage , client : PHXChannelsClient ) -> None : client . logger . info ( f 'ASYNC: { message =} ' ) async def main () -> None : token = 'auth_token' client : PHXChannelsClient with ThreadPoolExecutor () as pool : async with PHXChannelsClient ( token ) as client : client . register_event_handler ( event = Event ( 'event_name' ), handlers = [ print_handler , async_print_handler , ], ) client . register_topic_subscription ( Topic ( 'topic:subtopic' )) await client . start_processing ( pool ) if __name__ == '__main__' : asyncio . run ( main (), debug = True ) Developing This project uses pip-tools to manage dependencies. Before contributing ensure you agree to the DCO . Commits contributed to this project need to be signed in git . This can be done as follows ( Note -s is a shortcut for --signoff ) : git commit --signoff 1. Create a virtualenv Note: Creating the virtualenv can be done however you want. We will assume you\u2019ve done created a new virtualenv and activated it from this point. 2. Install pip-tools : pip install pip-tools 3. Install Dependencies pip-sync requirements/core.txt requirements/dev.txt","title":"Home"},{"location":"#phx-events","text":"PHX Events is an AsyncIO library to set up a websocket connection with Phoenix Channels in Python 3.9+.","title":"PHX Events"},{"location":"#installing-phx-events","text":"","title":"Installing PHX Events"},{"location":"#from-pip","text":"pip install phx-events","title":"From Pip"},{"location":"#from-source","text":"Clone the Git repo and then install the dependencies pip install -r requirements/core.txt","title":"From Source"},{"location":"#use-the-client-in-your-code","text":"import asyncio from concurrent.futures import ThreadPoolExecutor from phx_events.client import PHXChannelsClient from phx_events.phx_messages import ChannelMessage , Event , Topic def print_handler ( message : ChannelMessage , client : PHXChannelsClient ) -> None : client . logger . info ( f 'DEFAULT: { message =} ' ) async def async_print_handler ( message : ChannelMessage , client : PHXChannelsClient ) -> None : client . logger . info ( f 'ASYNC: { message =} ' ) async def main () -> None : token = 'auth_token' client : PHXChannelsClient with ThreadPoolExecutor () as pool : async with PHXChannelsClient ( token ) as client : client . register_event_handler ( event = Event ( 'event_name' ), handlers = [ print_handler , async_print_handler , ], ) client . register_topic_subscription ( Topic ( 'topic:subtopic' )) await client . start_processing ( pool ) if __name__ == '__main__' : asyncio . run ( main (), debug = True )","title":"Use the client in your code:"},{"location":"#developing","text":"This project uses pip-tools to manage dependencies. Before contributing ensure you agree to the DCO . Commits contributed to this project need to be signed in git . This can be done as follows ( Note -s is a shortcut for --signoff ) : git commit --signoff","title":"Developing"},{"location":"#1-create-a-virtualenv","text":"Note: Creating the virtualenv can be done however you want. We will assume you\u2019ve done created a new virtualenv and activated it from this point.","title":"1. Create a virtualenv"},{"location":"#2-install-pip-tools","text":"pip install pip-tools","title":"2. Install pip-tools:"},{"location":"#3-install-dependencies","text":"pip-sync requirements/core.txt requirements/dev.txt","title":"3. Install Dependencies"}]}